[build-system]
requires = ["setuptools>=64", "build==0.*", "wheel==0.*", "twine==4.*"]
build-backend = "setuptools.build_meta"

[project]
name = "tuiview"
authors = [
    {name = "Donald Mellenbruch", email = "hello@f2dv.com"},
]
description = "A TUI for every CLI."
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
]
dynamic = ["version"]
dependencies = [
    "typing-extensions; python_version<'3.10'",
    "yapx[tui]>=0.2.2,<1",
]

[project.optional-dependencies]
dev = [
    "python-lsp-server[rope]==1.*",
    "pylint==2.*",
    "pylint-pytest==1.*",
    "mypy[reports]==1.*",
    "ruff==0.*",
    "black[jupyter]==23.*",
    "isort==5.*",
    "bump2version==1.*",
    "pdbpp",
    # python -m ipykernel install --user --name tuiview
    "ipykernel",
    "ipywidgets",
    "ipython",
]
docs = [
    "mkdocs==1.*",
    "mkdocs-material==9.*",
    "mkdocs-jupyter==0.24.*",
    "mkdocstrings[python]==0.20.*",
    "mkdocs-autorefs==0.*",
    "mkdocs-include-dir-to-nav==1.*",
]
tests = [
    "pytest==7.*",
    "pytest-cov==4.*",
    "pytest-html==3.*",
    "pytest-sugar==0.*",
    "pytest-custom-exit-code==0.3.*",
    "pylint==2.*",
    "pylint-pytest==1.*",
    "packaging==23.*",
    "mockish>=0.1.1,<2",
]

[project.urls]
Homepage = "https://www.f2dv.com/r/tuiview"
Repository = "https://www.github.com/fresh2dev/tuiview"
Funding = "https://www.f2dv.com/fund"

[project.scripts]
tuiview = "tuiview.__main__:main"
tv = "tuiview.__main__:main"

[tool.setuptools.package-data]
"*" = ["**"]
[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
exclude = []
namespaces = false

[tool.setuptools.dynamic]
version = {attr = "tuiview.__version__.__version__"}

[tool.pytest.ini_options]
minversion = 7.0
testpaths = ["tests"]

[tool.pylint.MASTER]
ignore-paths = "^(?!src|tests).*$"
load-plugins = ["pylint_pytest"]
extension-pkg-whitelist = ["pydantic"]
[tool.pylint.messages_control]
max-line-length = 88
disable = [
    "fixme",
    "invalid-name",
    "unnecessary-pass",
    "unnecessary-ellipsis",
    "too-few-public-methods",
    "import-outside-toplevel",
    "missing-module-docstring",
]

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
files = "src/**/*.py"
plugins = ["pydantic.mypy"]
namespace_packages = true
explicit_package_bases = true
strict = true
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.black]
line-length = 88
include = 'src\/.*\.pyi?$|tests\/.*\.pyi?|docs\/.*\.ipynb$'

[tool.isort]
profile = "black"
line_length = 88
src_paths = ["src", "tests"]
float_to_top = true
include_trailing_comma = true
honor_noqa = true
quiet = true

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    # "D",  # pydocstyle
    "F",  # pyflakes
    "UP", # pyupgrade
    # "I",  # isort (missing-required-import)
    "C4",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "DTZ",  # flake8-datetimez
    "EM",  # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "G",  # flake8-logging-format
    "PIE",  # flake8-pie
    "RSE",  # flake8-raise
    # "ANN",# flake8-annotations
    "A",# flake8-builtins
    "COM",# flake8-commas
    "PT",# flake8-pytest-style
    "Q",# flake8-quotes
    "RET",# flake8-return
    "SIM",# flake8-simplify
    "ARG",# flake8-unused-arguments
    "PTH",# flake8-use-pathlib
    "ERA",# eradicate
    "PLW",# pylint-specific warnings
    "PLE",# pylint-specific errors
    "PLR",# pylint-specific refactors
    "PLC",# pylint-specific conventions
    # "RUF",# ruff-specific
    "TRY",# tryceratops
]
ignore = [
    # "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

# Avoid trying to fix flake8-bugbear (`B`) violations.
# Allow autofix for all enabled rules (when `--fix`) is provided.
# autofix F401=unused-imports
fixable = ["W", "E", "COM", "F401"]
unfixable = []

respect-gitignore = true

# Same as Black.
line-length = 88

target-version = "py37"

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "F401"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py3{7,8,9,10,11}
skip_missing_interpreters = false
toxworkdir = /tmp/.tox
minversion = 4.0
[testenv]
recreate = true
extras = tests
commands =
    python -m pytest {posargs}
    python -m pylint --disable=C,R '**/*.py'
"""
